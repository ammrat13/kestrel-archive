/* Kestrel instruction fields.  Each field is a name, group (currently */
/* 0 for chips, 1 for controller), start and end bits within complete */
/* instruction, default value (string, 1 char per bit, being 0, 1, x, */
/* r [required], z [default to 0], and w [default to 1]), and a */
/* comment or description. That is, */
/* */
/* FLD(name,group,start,end,default,comment) */
/* */
/* ********************************************************************** */
FLD(pc_out_sel,	1, 0, 1,"","PC value PC+1 (00), Imm (01), TOS (10), Old (11)")
FLD(push_pc,   	1, 2, 2,"","pushes PC+1 onto stack")
FLD(pop_pc,    	1, 3, 3,"","pops TOS")
FLD(push_cnt,  	1, 4, 4,"","push cont_imm onto counter stack")
FLD(dec_cnt,   	1, 5, 5,"","decrements ")
FLD(br_0,      	1, 6, 6,"","")
FLD(br_w_or,   	1, 7, 7,"","")
FLD(cnt_wr,   	1, 8, 9,"","")
FLD(bs_load,   	1,10,10,"","")
FLD(bs_sleft,	1,11,11,"","")
FLD(scr_sel,	1,12,13,"","")
FLD(scr_store,	1,14,14,"","")
FLD(left_d_sel, 1,15,15,"","")
FLD(right_d_sel,1,16,16,"","")
FLD(data_read,	1,17,17,"","")
FLD(data_write,	1,18,18,"","")
/* I_DATA_DIR         -- really comes the array side msb of the dest  */
/*                    -- 0 = left,  1 = right */
FLD(fifo_out,	1,19,19,"","")
FLD(cbreak,	1,20,20,"","")
FLD(cont_imm,	1,21,36,"","")
/* Diagnotic Mode Bits: */
FLD(D_pop_cnt,	1,37,37,"","")
FLD(D_OUT,	1,38,40,"","Diagnostic output")
/*     
#                        001 = SCR
#                        010 = CTR stack counter
#                        011 = PC Stack counter
#                        100 = CTR TOS lo
#                        101 = CNT TOS hi
#                        110 = PC lo
#                        111 = PC hi
*/
FLD(board_imm_mux, 1, 41, 41, "", "")
FLD(spare,	1,42,43,"","")
/*                known to the contoller as I_DATA_READ & I_DATA_WRITE */
FLD(imm,	0,44,51,"","immediate value")
FLD(dest,	0,52,57,"","destination")
FLD(opC,	0,58,63,"","operandC")
FLD(opA,	0,64,69,"","operandA")
FLD(opB,	0,70,72,"","operandB")
FLD(wr,		0,73,73,"","write to SRAM")
FLD(rd,		0,74,74,"","read from SRAM")
FLD(rm,		0,75,76,"","result mux control")
FLD(bit,	0,77,80,"","the bit shifter control")
FLD(fb,		0,81,85,"","flagbus control selects what is put on flag")
FLD(fbinv,	0,86,86,"","inverts flag")
FLD(lc,		0,87,87,"","Latch the carry out from ALU")
FLD(mp,		0,88,88,"","MultiPrecision if 1 carryin comes from carry latch")
FLD(ci,		0,89,89,"","carry in to the ALU (multiply if ci=mp=1)")
FLD(func,	0,90,94,"","ALU control ")
FLD(force,	0,95,95,"","forces instruction to be executed if 1")
          
