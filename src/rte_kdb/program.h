/* $Id: program.h,v 1.12 1999/02/24 23:47:38 dmdahle Exp $ */
/* 
 * Kestrel Run Time Environment 
 * Copyright (C) 1998 Regents of the University of California.
 * 
 * program.h - Defines the UserProgram structures and associated functions
 *	       that track all information about a user program running on kestrel.
 */

#ifndef _PROGRAM_H_
#define _PROGRAM_H_

#include "pe.h"

/* size of data movement operations to and from disk */
#define FILE_BUFFER_SIZE 16384
#define MAX_NUM_INPUT_FILES 20

#define PROGRAM_STATE_INIT 	1
#define PROGRAM_STATE_RUNNING 	2
#define PROGRAM_STATE_DONE 	3

#define FILE_FORMAT_DECIMAL	1
#define FILE_FORMAT_OCTAL	2
#define FILE_FORMAT_HEXIDECIMAL	3
#define FILE_FORMAT_BINARY	4

typedef struct _source_file {

  char *file_name;

  char *buffer;
  char **lineptr;

  int byte_count;
  int line_count;

  struct _source_file *next;

} SourceFile;

typedef struct _input_specifier {
  int input_format;
  char *input_filename;
  int isRemote;
} InputSpecifier;

typedef struct _input_specifier_list {
  int number;
  InputSpecifier a[MAX_NUM_INPUT_FILES];
} InputSpecifierList;

typedef struct _input_data {
  /* information regarding the users input data file */
  int input_format;	       /* format of input file */
  char *input_fileName;        /* name of input data file */
  int isRemote;
  FILE *input_fileHandle;      /* file handle for input data */
  int input_total;             /* total number of data points */
  int input_position;          /* number of data read from the input file */
  /*
    unsigned char *input_buffer; */ /* pointer to memory buffer for file reads */

} InputData;

typedef struct _user_program {

  int state;

  /* information about the user program */
  char *code_fileName;        /* name of program (.obj) file */
  int code_delinstrptrs;
  char **code_instrptr;
  int code_instr;             /* number of instructions in the program */
  char *code_buffer;	      	
  char **code_lines;
  int code_linecount;
  int code_offset;            /* offset of this program in instruction memory
			       * on the Kestrel board.  This number is used to
			       * relocate the program by ading this value to
			       * the controller immediate field to adjust branch
			       * targets. */
  int *code_breakpoints;      /* array indicating which instructions have a breakpoint
			       * set. Zero indicates no breakpoint, and >0 indicates
			       * a breakpoint is set and its number */
  int code_nextbps;           /* number of next breakpoint that gets set */

  SourceFile *source_files;

  /* info about if input is from a memory buffer */
  int useMemoryInput;
  unsigned char *input_mem_buffer;
  int input_mem_current_index;

  /* information regarding the users input data file */

  int currentInputIndex;
  InputData inputData[MAX_NUM_INPUT_FILES];
  int numInputData;

  int input_total;             /* total number of data points from all input */
  int input_writeBoard;        /* number of data points actually sent to the board */
  int input_gaveLastByte;      /* give the kestrel board one extra byte of
				* data for QIn. Thus, if the program reaches the
				* end and has read all its input data, then we know
				* the user didn't supply enough data. */
  int input_gaveLBInstr;       /* PC of instruction when Last byte was given */

  unsigned char *input_recoveredFromQin;
  int input_numQinBytes;

  int input_qinpad;		/* if insufficient data was provided, pad with nulls */
  int input_padbytes;		/* number of pad bytes written to qin */


  /* information about the output file that stores data generated by
   * the user program */
  int output_format;		/* output file format */
  char *output_fileName;       	/* name of output file */
  FILE *output_fileHandle;     	/* output file handle */
  int output_bytesWritten;     	/* total number of data points written to output file */
  unsigned char *output_buffer;	/* buffer containing data recent read from the board */
  int output_bufsize;	       	/* size of output buffer */
  int output_last;            	/* number of bytes in the output_buffer */

  /* information regarding the runtime status of this program */
  PE_ptr *PE;                  /* contents of registers, sram, and latches for each PE */
  reg_ptr *reg_info;           /* print format of register banks */
  reg_ptr *sram_info;          /* print format of sram banks */
#define LATCH_FORMAT_BSLATCH     0
#define LATCH_FORMAT_MDRLATCH    1
#define LATCH_FORMAT_MULTHILATCH 2
  char latch_format[3];        /* print format of latches. order[0:2] :
				* bsLatch, mdrLatch, multHiLatch */
  int latches_current;
  int regs_current;
  int controller_current;
  int queues_flushed;

  struct _controller_state *cntr_state;

  struct _user_program *next;

} UserProgram;


/* function prototypes */
UserProgram *InitializeUserProgram(char *obj_file,
				   char *output_file,
				   int output_format,
                                   InputSpecifierList *inputs);

void CloseUserProgram(UserProgram *program);
int LoadExecutable(UserProgram *program, char *file_name);
int OpenInputFile(UserProgram *program, char *file_name, int input_format);
int OpenOutputFile(UserProgram *program, char *file_name, int output_format);
int FlushDataOutputBuffer(UserProgram *program);
int PutDataInOutputBuffer(UserProgram *program, unsigned char value);
int IsInputDataExhausted(UserProgram *program);
int rawGetNextInputDataFromFile(UserProgram *program, unsigned char *value);
int GetNextInputData(UserProgram *program, unsigned char *value, int give_last);
void End_Program(UserProgram *program);
int Run_Program(UserProgram *program, int mode);
char *my_strdup(char *string);
void DisplayInstruction(UserProgram *program, int addr);
int IsValidInstruction(char *instr);
SourceFile *FindSourceFile(UserProgram *program, char *file_name);
void LowerCaseInstructions(UserProgram *program);
int computeSizeOfDataInCurrentFile(UserProgram *program);
int computeSizeOfDataInProgram(UserProgram *program);
void MoveOutputDataToFile(UserProgram *program);

#endif
